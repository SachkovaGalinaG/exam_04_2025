(Теория 6 билет) 
1. Объясните концепцию непрерывной интеграции (CI) и непрерывного развертывания (CD). Как они влияют на процесс разработки? 
2. Какие этапы включает в себя типичный CI/CD пайплайн в GitLab (gitlab-ci)? 
3. Что такое GitFlow и какие преимущества дает использование этой модели ветвления в процессе разработки? 

1.
=== Непрерывная интеграция — это методология разработки и набор практик, при которых в код вносятся небольшие изменения с частыми коммитами.
=== Непрерывная поставка — это автоматическое развертывание приложения в целевое окружение.
=== Непрерывное развертывание (CD) — это процесс релиза программного обеспечения, в котором используется автоматизированное тестирование
Представим: процесс разработки, тестирования, сборки и деплоя приложения отвечаем мы сами - делаем вручную. А теперь сделаем так, что руками ведем только процесс разработки, а все остальное автоматизировано. У нас будет некоторое место, где будет находится наш код, допустим github, в нем у нас будем самая главная ветка - master (продакшн код). Разработчики берут код из мастера и кладут в свою ветку, а когда они поработали эту ветку они пушат на гитхаб (влив ее в мастер). CI упаковывает, тестирует сборки и оповещает разработчиков, если что-то пошло не так. CD автоматически разворачивает приложения и выполняет дополнительные тесты.

=== Цели CI/CD: ===
* обеспечение последовательного и автоматизированного способа сборки, упаковки и тестирования продуктов или приложений;
* автоматизация развертывания в разных окружениях;
* сведение к минимуму ошибок и проблем.

=== Влияние на разработку: ===
* Ускорение выпуска обновлений.
* Раннее обнаружение ошибок.
* Повышение стабильности и надежности кода.

2.
=== Этапы — служат для группировки задач и определения порядка их выполнения. Задачи, принадлежащие одному этапу, выполняются параллельно, если доступно достаточное количество раннеров. Этапы будут выполняться в порядке, указанном в конфиге.

=== Если в файле .gitlab-ci.yml не указаны свои этапы, GitLab использует следующие: === 
.pre (необязательный) – выполняется в самом начале конвейера (например, для подготовки).
build – сборка приложения (компиляция, установка зависимостей).
test – запуск тестов (юнит-тесты, интеграционные тесты).
deploy – развертывание приложения (в staging/production).
.post (необязательный) – выполняется в конце конвейера (уведомления, очистка).


3.
=== GitFlow — это определенная надстройка над моделью ветвления Git, которая включает в себя использование фича веток и несколько основных веток. Была предложена Винсентом Дриссеном в 2010

=== Основные ветки GitFlow ===
* master/main: содержит тестированный, стабильный код, который может быть выложен на прод.
* develop: основная ветка для разработки, содержит актуальный, но не релизный код.
* feature: ветки для разработки новых функциональностей, которые впоследствии сливаются с develop.
* release: ветка для подготовки новых релизов, отделяется от develop, затем сливается с master и develop.
* hotfix: ветки для быстрого исправления ошибок в продакшен-версиях, сливаются с master и develop.

=== Преимущества GitFlow ===
Четкая структура управления версиями.
Поддержка множественных параллельных релизов.
Удобство в навигации по истории проекта.

=== Недостатки GitFlow ===
Требует настройки правил для веток, CI/CD.
Долгоживущие фичи. Часто ветка develop будет уходить вперед, поэтому при слиянии возможны конфликты.

